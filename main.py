import os
import logging
import json
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DATA_FILE = "user_data.json"
INTERVALS = [
    timedelta(minutes=30),
    timedelta(days=1),
    timedelta(days=2),  
    timedelta(days=8),
    timedelta(days=30)
]

user_data = {}

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_data
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                for user_id_str, topics in data.items():
                    user_id = int(user_id_str)
                    user_data[user_id] = []
                    for topic in topics:
                        topic_data = {
                            'topic': topic['topic'],
                            'study_date': datetime.fromisoformat(topic['study_date']),
                            'repetitions': [
                                {
                                    'date': datetime.fromisoformat(rep['date']),
                                    'completed': rep['completed']
                                }
                                for rep in topic['repetitions']
                            ]
                        }
                        user_data[user_id].append(topic_data)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {DATA_FILE}")
        else:
            print("üìÅ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
            user_data = {}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        user_data = {}

def save_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
    try:
        data_to_save = {}
        for user_id, topics in user_data.items():
            data_to_save[str(user_id)] = []
            for topic in topics:
                topic_data = {
                    'topic': topic['topic'],
                    'study_date': topic['study_date'].isoformat(),
                    'repetitions': [
                        {
                            'date': rep['date'].isoformat(),
                            'completed': rep['completed']
                        }
                        for rep in topic['repetitions']
                    ]
                }
                data_to_save[str(user_id)].append(topic_data)
        
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {DATA_FILE}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–°–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê (start, new_topic, handle_text_input, list_topics, mark_done, handle_unknown)
# –∫–æ—Ç–æ—Ä—ã–µ —É –Ω–∞—Å –†–ê–ë–û–¢–ê–õ–ò –≤ Replit - –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π!

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ –º–µ—Ç–æ–¥—É –≠–±–±–∏–Ω–≥–∞—É–∑–∞!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/newtopic - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É
/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã
/done - –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    """
    await update.message.reply_text(welcome_text)

async def new_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –ó–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∏–∑—É—á–∏–ª–∏:")
    context.user_data['waiting_for'] = 'topic'

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_text = update.message.text
    waiting_for = context.user_data.get('waiting_for', None)
    
    if waiting_for == 'topic':
        context.user_data['temp_topic'] = user_text
        context.user_data['waiting_for'] = 'date'
        await update.message.reply_text(
            "üïê –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n–ò–ª–∏ '—Å–µ–π—á–∞—Å'"
        )
    
    elif waiting_for == 'date':
        try:
            if user_text.lower() == '—Å–µ–π—á–∞—Å':
                study_date = datetime.now()
            else:
                study_date = datetime.strptime(user_text, '%d.%m.%Y %H:%M')
            
            topic = context.user_data['temp_topic']
            
            if user_id not in user_data:
                user_data[user_id] = []
            
            repetitions = []
            for interval in INTERVALS:
                repetition_date = study_date + interval
                repetitions.append({
                    'date': repetition_date,
                    'completed': False
                })
            
            topic_data = {
                'topic': topic,
                'study_date': study_date,
                'repetitions': repetitions
            }
            
            user_data[user_id].append(topic_data)
            save_data()
            
            response = f"‚úÖ –¢–µ–º–∞ '{topic}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\nüìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
            for i, rep in enumerate(repetitions, 1):
                status = "‚úÖ" if rep['completed'] else "‚è≥"
                response += f"{i}. {rep['date'].strftime('%d.%m.%Y %H:%M')} {status}\n"
            
            await update.message.reply_text(response)
            context.user_data.pop('temp_topic', None)
            context.user_data.pop('waiting_for', None)
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    elif waiting_for == 'topic_choice':
        try:
            topic_index = int(user_text) - 1
            user_topics = user_data.get(user_id, [])
            
            if 0 <= topic_index < len(user_topics):
                context.user_data['selected_topic_index'] = topic_index
                context.user_data['waiting_for'] = 'repetition_choice'
                
                topic_data = user_topics[topic_index]
                response = f"üéØ –¢–µ–º–∞: {topic_data['topic']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n"
                
                for i, repetition in enumerate(topic_data['repetitions'], 1):
                    status = "‚úÖ" if repetition['completed'] else "‚ùå"
                    response += f"{i}. {repetition['date'].strftime('%d.%m.%Y %H:%M')} {status}\n"
                
                await update.message.reply_text(response)
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–º—ã!")
                
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    elif waiting_for == 'repetition_choice':
        try:
            repetition_index = int(user_text) - 1
            topic_index = context.user_data['selected_topic_index']
            user_topics = user_data.get(user_id, [])
            
            if 0 <= repetition_index < len(user_topics[topic_index]['repetitions']):
                user_topics[topic_index]['repetitions'][repetition_index]['completed'] = True
                save_data()
                
                context.user_data.pop('selected_topic_index', None)
                context.user_data.pop('waiting_for', None)
                
                topic_name = user_topics[topic_index]['topic']
                rep_date = user_topics[topic_index]['repetitions'][repetition_index]['date'].strftime('%d.%m.%Y %H:%M')
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ {repetition_index + 1} –¥–ª—è '{topic_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n–í—Ä–µ–º—è: {rep_date}"
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è!")
                
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    else:
        await update.message.reply_text("ü§î –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /start, /newtopic, /list, /done")

async def list_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_data or not user_data[user_id]:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–º.")
        return
    
    response = "üìö –í–∞—à–∏ —Ç–µ–º—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n\n"
    
    for topic_index, topic_data in enumerate(user_data[user_id], 1):
        response += f"üéØ –¢–µ–º–∞ {topic_index}: {topic_data['topic']}\n"
        response += f"   –ò–∑—É—á–µ–Ω–∞: {topic_data['study_date'].strftime('%d.%m.%Y %H:%M')}\n"
        response += "   –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n"
        
        completed_count = sum(1 for rep in topic_data['repetitions'] if rep['completed'])
        total_count = len(topic_data['repetitions'])
        
        for rep_index, repetition in enumerate(topic_data['repetitions'], 1):
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if repetition['completed'] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
            response += f"   {rep_index}. {repetition['date'].strftime('%d.%m.%Y %H:%M')} - {status}\n"
        
        response += f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed_count}/{total_count} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n"
    
    await update.message.reply_text(response)

async def mark_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_data or not user_data[user_id]:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–º –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏.")
        return
    
    response = "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n\n"
    for i, topic_data in enumerate(user_data[user_id], 1):
        completed = sum(1 for rep in topic_data['repetitions'] if rep['completed'])
        total = len(topic_data['repetitions'])
        response += f"{i}. {topic_data['topic']} ({completed}/{total} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\n"
    
    await update.message.reply_text(response)
    context.user_data['waiting_for'] = 'topic_choice'

async def handle_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, /newtopic, /list –∏–ª–∏ /done"
    )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    load_data()
    
    # üîß –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù!
    TOKEN = "8437994346:AAFo34_5L1SIMLA4d1ooK3PWcj6AerEpwE0"
    
    if not TOKEN or TOKEN == "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨":
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return
    
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("newtopic", new_topic))
    application.add_handler(CommandHandler("list", list_topics))
    application.add_handler(CommandHandler("done", mark_done))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))
    application.add_handler(MessageHandler(filters.COMMAND, handle_unknown))
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!")
    application.run_polling()

if __name__ == '__main__':
    main()
